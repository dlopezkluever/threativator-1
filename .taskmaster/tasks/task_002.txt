# Task ID: 2
# Title: Build Onboarding Wizard Flow
# Status: done
# Dependencies: 1
# Priority: high
# Description: Create mandatory multi-step onboarding wizard that guides new users through Stripe setup, Kompromat upload, contact addition, and optional social media connection
# Details:
Build OnboardingWizard component with 4 steps using a state machine pattern. Step 1: Stripe integration - use Stripe Elements to collect payment method, create SetupIntent on backend, save stripe_customer_id. Step 2: Kompromat upload - create file upload component with drag-and-drop, validate file types (images/videos), upload to Supabase Storage in user-specific bucket, save references in kompromat table with severity levels. Step 3: Contact management - form to add email contacts with name/email validation, assign roles (witness/consequence_target), save to contacts table. Step 4: Social media connection (optional) - implement Twitter OAuth 2.0 flow with PKCE, store encrypted tokens. Use stepper UI component to show progress. Prevent navigation away until completion. Update user.onboarding_completed flag on finish

# Test Strategy:
Verify each step validates inputs before allowing progression. Test file upload size limits and type restrictions. Ensure Stripe customer creation succeeds. Validate contacts are saved with correct roles. Test skip functionality for optional social media step. Verify onboarding_completed flag is set only after all required steps

# Subtasks:
## 1. Implement Stripe Payment Integration [done]
### Dependencies: None
### Description: Set up Stripe Elements for payment method collection and create backend endpoints for SetupIntent creation and customer management
### Details:
Install @stripe/stripe-js and @stripe/react-stripe-js packages. Create Stripe account and obtain API keys. Build StripePaymentStep component using CardElement from Stripe Elements. Create Supabase Edge Function 'create-setup-intent' that initializes a SetupIntent and returns client_secret. Implement payment method attachment flow with proper error handling. Create Edge Function 'create-stripe-customer' to generate customer ID and store in users table. Add loading states and validation for card details. Handle 3D Secure authentication if required. Store stripe_customer_id in user profile upon successful setup

## 2. Build Kompromat Upload Component [done]
### Dependencies: None
### Description: Create drag-and-drop file upload interface for Kompromat with Supabase Storage integration and severity level assignment
### Details:
Build KompromatUploadStep component with react-dropzone for drag-and-drop functionality. Implement file type validation for images (jpg, png, gif) and videos (mp4, mov, avi) with max 50MB size limit. Create Supabase Storage bucket 'kompromat' with RLS policies for user-specific folders. Build upload progress indicator using XMLHttpRequest upload events. Add preview thumbnails for uploaded files using URL.createObjectURL(). Implement severity level selector (Low/Medium/High/Critical) for each file. Create database records in kompromat table with file_url, type, severity, and user_id. Add ability to remove files before final submission. Handle multiple file uploads with batch processing

## 3. Create Contact Management Interface [done]
### Dependencies: None
### Description: Develop contact addition form with role assignment and validation for witness and consequence target contacts
### Details:
Build ContactManagementStep component with dynamic form for adding multiple contacts. Create contact input fields with email validation using regex pattern. Implement role selector dropdown for each contact (witness/consequence_target). Add name field with character limit validation. Build contact list preview showing added contacts with edit/delete capabilities. Implement bulk contact import from CSV option. Create validation to require at least one witness contact. Save contacts to contacts table with proper role assignments and user association. Add duplicate email detection to prevent adding same contact twice. Include optional relationship/notes field for each contact

## 4. Implement Social Media OAuth Connection [done]
### Dependencies: None
### Description: Build optional Twitter/X OAuth 2.0 integration with PKCE flow for social media deadline posting
### Details:
Create SocialMediaStep component with Twitter/X connection option and skip button. Register Twitter App and obtain OAuth 2.0 credentials. Implement PKCE (Proof Key for Code Exchange) flow with code_challenge generation. Create Edge Function 'twitter-oauth-callback' to handle authorization code exchange. Store encrypted access_token and refresh_token in social_connections table using Supabase Vault. Build connection status indicator showing linked accounts. Add disconnect option for already connected accounts. Implement token refresh logic for expired access tokens. Create test post functionality to verify connection works. Handle OAuth errors and provide user-friendly error messages

## 5. Build Wizard Navigation and State Management [done]
### Dependencies: 2.1, 2.2, 2.3, 2.4
### Description: Create stepper UI component with state machine pattern for wizard flow control and progress tracking
### Details:
Implement OnboardingWizard parent component using XState or custom state machine for flow control. Create StepperUI component showing visual progress with step numbers and labels. Build navigation controls with Next/Previous buttons and step validation. Implement beforeUnload event listener to warn users about leaving incomplete onboarding. Store wizard progress in localStorage for resume capability. Add step transition animations using Framer Motion or CSS transitions. Create validation logic that prevents advancing until current step requirements are met. Implement completion handler that updates user.onboarding_completed flag. Add error boundary to handle component failures gracefully. Build responsive layout that works on mobile devices


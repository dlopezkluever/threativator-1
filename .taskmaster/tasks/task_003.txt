# Task ID: 3
# Title: Create Main Dashboard Interface
# Status: done
# Dependencies: 1, 2
# Priority: high
# Description: Develop the main dashboard with upcoming deadlines sidebar, calendar view, visible stakes display, and navigation to all major features
# Details:
Build Dashboard layout component with responsive grid using Tailwind CSS. Implement UpcomingDeadlines sidebar component that queries checkpoints table for next 7 days, sorted by deadline. Create Calendar component using a library like react-big-calendar, showing all goals and checkpoints color-coded by status. Add VisibleStakes component displaying total monetary stake from holding_cell_balance and Kompromat count with thumbnails. Include QuickActions panel with 'Create New Goal' and 'Submit Proof' CTAs. Fetch user data and active goals using Supabase real-time subscriptions for live updates. Add navigation menu with links to Goals, Submissions, Settings. Use Magic UI components for animations and polish. Implement loading states and error boundaries

# Test Strategy:
Test dashboard loads all user data correctly. Verify upcoming deadlines are sorted and filtered properly. Ensure calendar displays all goals and checkpoints with correct dates. Test real-time updates when data changes. Verify responsive layout on mobile/tablet/desktop. Test navigation to all linked pages

# Subtasks:
## 1. Create Dashboard Layout Component [done]
### Dependencies: None
### Description: Build the main dashboard container with responsive grid layout using Tailwind CSS for desktop, tablet, and mobile views
### Details:
Create DashboardLayout.tsx component with a responsive grid structure using Tailwind's grid system. Implement a 12-column layout with sidebar (3 cols), main content area (6 cols), and right panel (3 cols) on desktop. Add responsive breakpoints for tablet (stacked layout) and mobile (single column). Include header navigation bar with user profile dropdown and main navigation links. Set up proper spacing, padding, and container max-width. Add dark mode support using Tailwind's dark variant classes. Structure the layout to accommodate all dashboard widgets and ensure proper overflow handling.
<info added on 2025-09-01T17:09:54.260Z>
Replace "Tailwind CSS" styling approach with Soviet Constructivist design system from ui-&-theme-guide.md: Use Primary Red (#DA291C), Accent Black (#000000), Background Parchment (#F5EEDC) colors. Implement Stalinist One font for headings (UPPERCASE) and Roboto Condensed for body text. Create sharp rectangular layout with no rounded corners, adhering to an 8-point grid system. Design a rigid, official document aesthetic with stark contrast. Remove generic "Tailwind dark mode" support; instead, use only the specified Soviet theme colors for all states.
</info added on 2025-09-01T17:09:54.260Z>

## 2. Implement Upcoming Deadlines Sidebar [done]
### Dependencies: 3.1
### Description: Create a sidebar component that displays upcoming checkpoints and deadlines for the next 7 days with real-time updates
### Details:
Build UpcomingDeadlines.tsx component that queries the checkpoints table using Supabase. Filter checkpoints where deadline is within next 7 days and status is not 'completed'. Sort by deadline ascending with closest deadlines first. Display each deadline with goal title, checkpoint name, time remaining (using relative time like '2 days'), and color-coded urgency indicators (red for <24h, yellow for <3 days, green for >3 days). Implement Supabase real-time subscription to update list when checkpoints change. Add loading skeleton while data fetches. Include empty state message when no upcoming deadlines exist. Add click handler to open submission modal for each deadline.
<info added on 2025-09-01T17:10:09.379Z>
Update component heading to "IMMEDIATE DIRECTIVES" using 'Stalinist One' font (UPPERCASE). Modify urgency indicators: critical state (<24h) must use Primary Red (#DA291C). Apply rigid, authoritative visual hierarchy with stark contrast. Ensure all microcopy is direct and imperative, reflecting state authority.
</info added on 2025-09-01T17:10:09.379Z>

## 3. Build Calendar View Component [done]
### Dependencies: 3.1
### Description: Integrate react-big-calendar to display all goals and checkpoints with color-coding and interactive features
### Details:
Install and configure react-big-calendar with moment.js for date handling. Create CalendarView.tsx component that fetches all user goals and checkpoints from Supabase. Map data to calendar events with title, start/end dates, and custom properties. Implement color-coding system: green for completed, yellow for pending, red for overdue, gray for future. Add event click handlers to show goal/checkpoint details in a modal. Configure calendar views (month, week, day) with view switcher. Add toolbar with navigation buttons and today button. Style calendar using custom CSS to match app theme. Implement drag-and-drop for rescheduling checkpoints (if allowed). Add legend showing color meanings.

## 4. Create Visible Stakes Display Component [done]
### Dependencies: 3.1
### Description: Build a component showing total monetary stakes and Kompromat count with visual thumbnails and animations
### Details:
Create VisibleStakes.tsx component with two main sections. For monetary stakes: query holding_cell_balance from user profile, display with currency formatting and animated counter using Magic UI NumberTicker component. Add visual indicator (lock icon or vault graphic) and show breakdown by goal if applicable. For Kompromat section: query kompromat table for count and thumbnails, display total count with severity indicators, show grid of blurred thumbnails (3-4 max) with hover effect revealing slight clarity. Implement privacy-first approach with heavy blur and no actual content visible. Add 'View All' link to settings page. Use Magic UI Card component for container with gradient border. Include tooltips explaining what stakes mean.
<info added on 2025-09-01T17:10:24.354Z>
Update design to align with Soviet Constructivist aesthetics: replace Magic UI components with custom implementations featuring Primary Red (#DA291C) and stark contrast. Ensure all elements use sharp rectangles with no rounded corners, emphasizing an authoritative visual hierarchy. Headings must use Stalinist One font (UPPERCASE) and body text Roboto Condensed. The Kompromat section should adopt official state archive aesthetics, including "SECURE STATE ARCHIVE" labeling.
</info added on 2025-09-01T17:10:24.354Z>

## 5. Implement Quick Actions Panel and Navigation [done]
### Dependencies: 3.1, 3.2, 3.3, 3.4
### Description: Create quick action buttons for common tasks and implement main navigation menu with routing
### Details:
Build QuickActions.tsx panel with two primary CTA buttons using Magic UI Button components with gradient backgrounds. 'Create New Goal' button opens goal creation modal/page, 'Submit Proof' button opens submission modal with dropdown to select checkpoint. Add secondary actions like 'View Analytics' and 'Invite Friend'. Implement NavigationMenu.tsx with links to main sections: Goals (list view), Submissions (history), Settings (profile/preferences), Help (documentation). Use React Router for navigation with active state highlighting. Add breadcrumb navigation for nested routes. Include notification badge on menu items when applicable. Add user profile section with avatar, name, and logout option. Ensure all navigation maintains current dashboard state.

